#
# GitLab CI/CD configuration
#


include:
  - component: $CI_SERVER_FQDN/tech_team/ci/autocompliance/autocompliance@~latest
  - component: $CI_SERVER_FQDN/tech_team/ci/secrets-detection/secrets-detection@~latest
  - component: $CI_SERVER_FQDN/tech_team/ci/trust/trust@~latest
  - component: $CI_SERVER_FQDN/tech_team/ci/create-release/create-release@~latest


default:
  interruptible: true


.container_builds:
  stage: build
  trigger:
    include: .gitlab/templates/build_container.yml
    forward:
      yaml_variables: true
      pipeline_variables: true
    strategy: depend


alpine321-buildenv:
  variables:
    DESTINATION: $CI_REGISTRY_IMAGE/alpine321-buildenv
    DOCKERFILE: ./images/alpine321-buildenv/Dockerfile
    TAG: "$CI_COMMIT_BRANCH"
    BASE_IMAGE_TAG: "1.0.0"
  extends: .container_builds


alpine321-build:
  stage: build
  image: $CI_REGISTRY_IMAGE/alpine321-buildenv:$CI_COMMIT_BRANCH
  needs: [ alpine321-buildenv ]
  script:
    - cargo build --release
  artifacts:
    name: "trust-1.0.3-alpine321"
    paths:
      - target/release/trust


alpine321-runtime:
  stage: deploy
  needs:
    - job: alpine321-build
      artifacts: true
  image:
      name: package-cache.honda-ri.de/kaniko-project/executor:debug
      entrypoint: [ "" ]
  before_script:
      - mkdir ./etc
      - echo "${SSL_ROOT_CA_CERT}" > ./etc/HRI-CA_cert.crt
      - cp ./etc/HRI-CA_cert.crt /kaniko/ssl/certs/ca-certificates.crt
      - mkdir -p /kaniko/.docker
      - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
      - >-
        /kaniko/executor
        --context ${CI_PROJECT_DIR}
        --dockerfile ./images/alpine321-runtime/Dockerfile
        --build-arg "FROM_IMAGE_VERSION=1.0.0-${CI_COMMIT_SHA}"
        --destination $CI_REGISTRY_IMAGE/alpine321-runtime:1.0.3


alpine321-selftest:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/alpine321-runtime:1.0.3
  needs: [ alpine321-runtime, alpine321-build ]
  script:
    - /opt/hri/trust/bin/trust


ubuntu2204-buildenv:
  variables:
    DESTINATION: $CI_REGISTRY_IMAGE/ubuntu2204-buildenv
    DOCKERFILE: ./images/ubuntu2204-buildenv/Dockerfile
    TAG: "$CI_COMMIT_BRANCH"
    BASE_IMAGE_TAG: "1.4.0"
  extends: .container_builds


ubuntu2204-build:
  stage: build
  image: $CI_REGISTRY_IMAGE/ubuntu2204-buildenv:$CI_COMMIT_BRANCH
  needs: [ ubuntu2204-buildenv ]
  script:
    - source "${HOME}/.cargo/env"
    - cargo --version
    - cargo build --release
  artifacts:
    name: "ubuntu2204"
    paths:
      - target/release/trust


ubuntu2204-selftest:
  stage: test
  # For the selftest, Cargo or Rust crates are not needed. All essential libraries
  # are already included in the main-image. Therefore, we use the base image directly.
  image: $CI_SERVER_FQDN:5050/tech_team/docker/ubuntu2204-hri-main:1.4.0
  needs: [ ubuntu2204-build ]
  script:
    - ./target/release/trust

